name: MasterBuild

on:
  push:
    branches:
      - master

env:
  GITHUB_REF: ${{ github.ref }}
  GITHUB_SHA: ${{ github.sha }}
  IMAGE_PREFIX: pangeo/

jobs:
  base-image:
    env:
      IMAGE: base-notebook
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Set Job Environment Variables
      run: |
        CALVER="$( date -u '+%Y.%m.%d' )"
        SHA="$( git rev-parse --short ${GITHUB_SHA} )"
        DOCKER_TAG="${CALVER}-${SHA}"
        IMAGE_SPEC="${IMAGE_PREFIX}${IMAGE}:${DOCKER_TAG}"
        ONBUILD_IMAGE_SPEC=${IMAGE_PREFIX}${IMAGE}-onbuild:${DOCKER_TAG}
        echo "::set-env name=DOCKER_TAG::${DOCKER_TAG}"
        echo "::set-env name=IMAGE_SPEC::${IMAGE_SPEC}"
        echo "::set-env name=ONBUILD_IMAGE_SPEC::${ONBUILD_IMAGE_SPEC}"
    - name: Set Up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Enable Pip Cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install Dependencies
      run: |
        python --version
        pip install -r requirements.txt
        repo2docker --version
        docker version
    - name: Build Image
      run: |
        python3 build.py --image-prefix=${IMAGE_PREFIX} --tag=${DOCKER_TAG} ${IMAGE}
        docker run ${ONBUILD_IMAGE_SPEC} conda list > conda-packages.txt
    - name: Archive Conda Package List
      uses: actions/upload-artifact@v1
      with:
        name: ${{env.IMAGE}}-packages
        path: conda-packages.txt
    - name: Authenticate with DockerHub
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
    - name: Push Image to DockerHub
      # NOTE: could export tag names from build.py?
      run: |
        IMAGE_LATEST=${IMAGE_PREFIX}${IMAGE}:latest
        ONBUILD_IMAGE_LATEST=${IMAGE_PREFIX}${IMAGE}-onbuild:latest
        docker tag $IMAGE_SPEC $IMAGE_LATEST
        docker tag $ONBUILD_IMAGE_SPEC $ONBUILD_IMAGE_LATEST
        docker push $IMAGE_LATEST
        docker push $IMAGE_SPEC
        docker push $ONBUILD_IMAGE_LATEST
        docker push $ONBUILD_IMAGE_SPEC

  onbuild-images:
    needs: base-image
    strategy:
      fail-fast: false
      matrix:
        IMAGE: [pangeo-notebook, pangeo-esip, pangeo-ml]
    name: ${{ matrix.IMAGE }}
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2
    - name: Set Job Environment Variables
      run: |
        CALVER="$( date -u '+%Y.%m.%d' )"
        SHA="$( git rev-parse --short ${GITHUB_SHA} )"
        DOCKER_TAG="${CALVER}-${SHA}"
        IMAGE_SPEC="${IMAGE_PREFIX}${{ matrix.IMAGE }}:${DOCKER_TAG}"
        ONBUILD_IMAGE_SPEC=${IMAGE_PREFIX}${{ matrix.IMAGE }}-onbuild:${DOCKER_TAG}
        echo "::set-env name=DOCKER_TAG::${DOCKER_TAG}"
        echo "::set-env name=IMAGE_SPEC::${IMAGE_SPEC}"
        echo "::set-env name=ONBUILD_IMAGE_SPEC::${ONBUILD_IMAGE_SPEC}"
    - name: Set Up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Enable Pip Cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install Dependencies
      run: |
        python --version
        pip install -r requirements.txt
        repo2docker --version
        docker version
    - name: Build Image
      run: |
        python3 build.py --image-prefix=${IMAGE_PREFIX} --tag=${DOCKER_TAG} ${{ matrix.IMAGE }}
        docker run ${ONBUILD_IMAGE_SPEC} conda list > conda-packages.txt
    - name: Archive Conda Package List
      uses: actions/upload-artifact@v1
      with:
        name: ${{matrix.IMAGE}}-packages
        path: conda-packages.txt
    - name: Authenticate with DockerHub
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
    - name: Push Image to DockerHub
      run: |
        IMAGE_LATEST=${IMAGE_PREFIX}${{ matrix.IMAGE }}:latest
        ONBUILD_IMAGE_LATEST=${IMAGE_PREFIX}${{ matrix.IMAGE }}-onbuild:latest
        docker tag $IMAGE_SPEC $IMAGE_LATEST
        docker tag $ONBUILD_IMAGE_SPEC $ONBUILD_IMAGE_LATEST
        docker push $IMAGE_LATEST
        docker push $IMAGE_SPEC
        docker push $ONBUILD_IMAGE_LATEST
        docker push $ONBUILD_IMAGE_SPEC
